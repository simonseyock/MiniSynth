// #ifndef __CONTROLLERMAIN__
// #define __CONTROLLERMAIN__

// #include "Controller.js"
// #include "Playback.js"
// #include "Sequencer.js"
// #include "Synthesizer.js"
// #include "Screen.js"

synth.controller.Main = function (opt_options) {

  opt_options = opt_options || {};
  this.className_ = opt_options.className || "synth-main";

  synth.controller.Controller.call(this, opt_options);

  this.audioContext_ = new (window.AudioContext || window.webkitAudioContext)();

  // creating of controllers

  this.playbackController_ = new synth.controller.Playback(this.audioContext_);
  this.playerController_ = new synth.controller.Sequencer(this.playbackController_.clock);
  this.instrumentController_ = new synth.controller.Synthesizer(this.audioContext_);
  this.playerController_.player.setInstrument(this.instrumentController_.instrument);

  this.screenController_ = new synth.controller.Screen();

  // assembly of the view

  this.$element_.append(this.playbackController_.get$Element());
  this.$element_.append(this.instrumentController_.gainController_.get$Element());
  this.screenController_.addScreen(this.playerController_.get$Element(), "Sequencer");
  this.screenController_.addScreen(this.instrumentController_.get$Element(), "Synthesizer");
  this.$element_.append(this.screenController_.get$Element());

  this.instrumentController_.instrument.connect(this.audioContext_.destination);


  // setting instrument to a more pleasant default
  this.instrumentController_.instrument.setState({"frequencyTable":[16.351597831287403,17.323914436054494,18.354047994837956,19.445436482630047,20.601722307054363,21.826764464562732,23.124651419477132,24.499714748859315,25.95654359874656,27.49999999999999,29.135235094880603,30.86770632850774,32.703195662574814,34.647828872109,36.70809598967592,38.8908729652601,41.203444614108726,43.65352892912547,46.24930283895427,48.999429497718644,51.913087197493134,54.99999999999998,58.270470189761205,61.735412657015495,65.40639132514963,69.295657744218,73.41619197935186,77.7817459305202,82.40688922821747,87.30705785825096,92.49860567790854,97.9988589954373,103.82617439498627,109.99999999999997,116.54094037952244,123.470825314031,130.81278265029928,138.59131548843604,146.83238395870373,155.5634918610404,164.81377845643493,174.6141157165019,184.99721135581717,195.9977179908746,207.65234878997256,220,233.0818807590449,246.941650628062,261.6255653005986,277.1826309768721,293.6647679174075,311.12698372208087,329.6275569128699,349.2282314330039,369.99442271163434,391.99543598174927,415.3046975799451,440,466.1637615180899,493.8833012561241,523.2511306011974,554.3652619537442,587.3295358348151,622.2539674441618,659.25511382574,698.4564628660078,739.9888454232689,783.9908719634986,830.6093951598905,880,932.3275230361799,987.7666025122485,1046.5022612023947,1108.7305239074885,1174.6590716696305,1244.507934888324,1318.5102276514801,1396.9129257320158,1479.9776908465378,1567.9817439269975,1661.2187903197812,1760.0000000000005,1864.6550460723602,1975.533205024497,2093.0045224047904,2217.461047814977,2349.318143339261,2489.0158697766483,2637.0204553029603,2793.825851464032,2959.955381693076,3135.9634878539955,3322.437580639563,3520.0000000000014,3729.3100921447203,3951.0664100489944,4186.009044809581,4434.922095629955,4698.636286678523,4978.031739553297,5274.040910605922,5587.651702928064,5919.910763386152,6271.926975707993,6644.875161279126,7040.000000000003,7458.6201842894425,7902.132820097991],"modules":[{"waveType":"sine","gain":0.4675,"attack":0.2025,"decay":0,"sustain":1,"release":0.3375},{"type":"lowpass","frequency":350,"resonance":1,"amount":0},{"waveType":"sawtooth","gain":0.6775,"attack":0.1275,"decay":0.2,"sustain":0.52,"release":0.4375},{"type":"highpass","frequency":459.2500003,"resonance":0,"amount":0},{"gain":0.4}]});

};
synth.inherits(synth.controller.Main, synth.controller.Controller);

// #endif
