JavaScript Synthesizer

Konzept

Das Ziel ist es eine Anwendung zu estellen die einen Synthesizer mit einem Sequencer in einer mobilfähigen Webpage darzustellen.
Diese sollen beide über zwei unterschiedliche Ansichten steuerbar sein. Globale Kontrollen sollen auf beiden Ansichten verfügbar sein (Geschwindigkeit in BpM, Play/Pause/Stop). 
Die erste Ansicht ist die des Sequencers. Der Sequencer spielt den Synthesizer. Der Sequencer besteht aus 8x8 Feldern, die verschiedene Noten innerhalb eines Taktes darstellen, der in einem Loop läuft.
Die Einstellungen des Synthesizers (Wellenform der Oscillatoren, Hüllkurvenform, Filtereinstellungen) sollen über eine Ansicht mit mehreren Drehreglern steuerbar sein.


Verwendete Techniken

Die Software soll hauptsächlich in Javascript geschrieben werden, sie Audiofunktionalitäten werden mit Hilfe der vom W3C entworfenen HTML5/ECMAScript5 Web Audio Api realisiert werden. Zur Darstellung und Steuerung werden HTML-Elemente verwendet, die mit Hilfe der jQuery Bibliothek vom JavaScript erzeugt werden.
Benötigte Bibliotheken auf Clientseite:
- jQuery (HTML-Manipulation, EventHandling im HTML)
- lodash (nützliche Hilfsfunktionen für Javascript z.B. clone, sort, map, isNaN, etc.)

Benötigte Bibliotheken/Software zur Entwicklung:
- node (JavaScript engine die ausführung von Javascript in der Konsole ermöglicht)
- npm (Paketverwaltung)
- uprocess (Durch Schlüsselwörter gesteuertes Zusammenfügen von mehreren Javascriptdateien zu einer fertigen Datei)
- less (Eine Syntax um CSS einfacherer und strukturierter in mehreren Dateien darzustellen, wird ebenfalls zu einer Datei zusammengefügt)


TODO

1. Modelle / Logik
	- Grundlegende Datentypen:
		timeObjects: Objekte, die eine Zeit, eine Dauer und assozierte Daten enthalten.
		TimeCollection: Eine Klasse deren Objekte eine Sammlung von timeObjects enthalten und verschiedene Funktionen enthalten um diese zu organisieren, bzw. gesammelt auf sie zugreifen zu können.
	- StateExchangeObjekt
		Eine Basisklasse, die das einfache auslesen und setzen aller für das reproduzieren der Objekte im aktuellen Zustand nötigen Parameter realisiert. Soll verwendet werden um es später zu ermöglichen Einstellungen zum Beispiel in einer Datenbank zu speichern.
	- Instrument
		Das Instrument ist eine Basisklasse, die grundlegende Funktionen eines Instruments in dieser Software darstellt. Momentan ist es nur geplant konkret Synthesizer vom Instrument abzuleiten, es soll jedoch die Möglichkeit im Auge behalten werden, später auch einen Sampler von dieser Klasse abzuleiten.
			Ableitungen:
			- Simple Synthesizer
				Ein einfacher Synthesizer, der keine Steuerung enthält sondern nur einfache Töne abspielt. Zum Testen, soll nachher nicht in der Software verwendet werden.
			- Synthesizer
				Enthält verschiedene Module, die als einzelne Klassen realisiert werden sollen:
				- Oscillator
					Ein Tongenerator, der Töne in einstellbaren Frequenzen und Wellenformen anbietet, ist so schon in der Web Audio Api enthalten. Darüber hinaus soll es möglich sein mehrere Töne gleichzeitig zu spielen.
				- Timer und Envelopeshaper
					Steuert das Timing der Noten und die Hüllkurve (Info: Parameter einer Hüllkurve sind Attack, Sustain, Release, Decay, sie steuern das Anschwellen, Anhalten und Abschwellen eines Tones). Muss selbst realisiert werden.
				- Filter
					Eine FilterNode ist bereits in der Web Audio Api enthalten, wahrscheinlich kann sie direkt so verwendet werden und muss nicht weiter angepasst werden.
	- Player
		Eine Basisklasse, die ein Modul representiert, das ein Instrument steuert (spielt).
		Ableitungen:
			- 8x8 sequencer
				Ein Sequencer, der einen Takt in Achtel unterteilt und 8 Noten in einer einstellbaren Skala anbietet.
	- Clock 
		Ein Objekt, das regelmäßig die Tonerzeugung anstößt und den Playern mitteilt in welchem Teil des Taktes das Playback sich gerade befindet und in welcher Geschwindigkeit gespielt werden soll. Informiert die Player außerdem über starten und stoppen des Playbacks.
	- Scale
		ordnet die Noten einer Tonleiter Frequenzen zu (dabei entspricht der Wert 0 C3, der Wert 2 D3, der Wert 4 E4, der Wert -1 B2, der Wert -3 A2 usw.)
2. ViewControllers
	Diese Klassen übernehmen die Erzeugung des passenden HTMLs und der Eventhandler und verknüpfen diese mit der Logik.
	- playback
	- 8x8 sequencer view
	- synthesizer view
	- flip view - der Wechsel zwischen zwei Ansichten, hat keine Auswirkungen auf die Logik
4. CSS
	Die erzeugten Ansichten werden mit CSS gestylet


Zeitplanung:

1. Grundlegende Datentypen
2. Clock/Playback
3. SimpleSynthesizer (zum Testen des Sequencers)
4. Sequencer
5. ViewControllers für Clock/Playback, SimpleSynthesizer und Sequencer
6. Synthesizer
7. ViewController für Synthesizer, FlipView
8. CSS
